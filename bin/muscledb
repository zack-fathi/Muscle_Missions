#!/bin/bash

set -Eeuo pipefail

# Detect the appropriate realpath command
if command -v grealpath >/dev/null 2>&1; then
    REALPATH="grealpath"
else
    REALPATH="realpath"
fi

# Get the absolute path of the script directory
SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

# Define paths relative to the project root
DB_DIR="$($REALPATH "${SCRIPT_DIR}/../var")"
DB_FILE="${DB_DIR}/muscle.sqlite3"
SCHEMA_SCRIPT="$($REALPATH "${SCRIPT_DIR}/../backend/sql/schema.sql")"
SQL_SCRIPT="$($REALPATH "${SCRIPT_DIR}/../backend/sql/data.sql")"

# Check if required files exist before running commands
validate_paths() {
    if [ ! -f "${SCHEMA_SCRIPT}" ]; then
        echo "‚ùå ERROR: Schema file not found: ${SCHEMA_SCRIPT}"
        exit 1
    fi
    if [ ! -f "${SQL_SCRIPT}" ]; then
        echo "‚ùå ERROR: Data file not found: ${SQL_SCRIPT}"
        exit 1
    fi
}

create_db() {
    if [ -f "${DB_FILE}" ]; then
        echo "‚ö†Ô∏è  ERROR: Database already exists!"
        exit 1
    fi
    echo "‚úÖ Creating database..."
    mkdir -p "${DB_DIR}"
    validate_paths
    sqlite3 "${DB_FILE}" < "${SCHEMA_SCRIPT}"
    sqlite3 "${DB_FILE}" < "${SQL_SCRIPT}"
    echo "üéâ Database created successfully at ${DB_FILE}"
}

destroy_db() {
    if [ -f "${DB_FILE}" ]; then
        echo "‚ö†Ô∏è  Destroying database..."
        rm -f "${DB_FILE}"
        echo "‚úÖ Database removed!"
    else
        echo "‚ö†Ô∏è  No database found at ${DB_FILE}"
    fi
}

reset_db() {
    echo "‚ö†Ô∏è  Resetting database..."
    rm -f "${DB_FILE}"
    mkdir -p "${DB_DIR}"
    validate_paths
    sqlite3 "${DB_FILE}" < "${SCHEMA_SCRIPT}"  # Reload schema
    sqlite3 "${DB_FILE}" < "${SQL_SCRIPT}"     # Reload sample data
    echo "‚úÖ Database reset successfully at ${DB_FILE}!"
}

# Ensure an argument was provided
if [ "$#" -ne 1 ]; then
    echo "‚ö†Ô∏è  Usage: $0 {create|destroy|reset}"
    exit 1
fi

case "$1" in
    create)
        create_db
        ;;
    destroy)
        destroy_db
        ;;
    reset)
        reset_db
        ;;
    *)
        echo "‚ö†Ô∏è  Invalid option. Usage: $0 {create|destroy|reset}"
        exit 1
esac
